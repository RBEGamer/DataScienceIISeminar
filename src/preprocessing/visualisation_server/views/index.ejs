<html lang="en">

<head>

    <link href="/bootstrap-5.1.3-dist/css/bootstrap.min.css" rel="stylesheet" media="all">
    <!--<link href="/bootstrap-select-1.13.14/dist/css/bootstrap-select.min.css" rel="stylesheet" media="all">-->
    <link href="/css/fh_design.css" rel="stylesheet" media="all">


    <link href="/css/landing-page.css" rel="stylesheet">
    <link href="/css/main.css" rel="stylesheet">

    <link href="/css/fullscreen_modal.css" rel="stylesheet">
    <link href="/css/fullscreen_modal_map.css" rel="stylesheet">


    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="kaps avatar test side">
    <meta name="author" content="Marcel Ochsendorf">
    <meta http-equiv="cache-control" content="max-age=0"/>
    <meta http-equiv="cache-control" content="no-cache"/>
    <meta http-equiv="expires" content="0"/>
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT"/>
    <meta http-equiv="pragma" content="no-cache"/>
    <title><%= app_name %></title>


    <style>


        #content .info {
            height: 20px;

        }

        #content .map path {
            fill: #aaa;
            stroke: #fff;
        }

        #content .bounding-box rect {
            fill: none;
            stroke: #333;
            stroke-dasharray: 2, 1;
        }

        #content .centroid {
            display: none;
        }

        #content .centroid circle {
            fill: red;
        }

        circle {
            fill: #fff;
            fill-opacity: 0.4;
            stroke: #111;
        }

        path.active {
            fill: pink;
        }

        circle.active {
            fill: blue;
        }


    </style>
</head>

<body>


<!------------------ LOADING OVERLAY -------------->

<div id="modal_loading_overlay" class="overlay"></div>
<div id="modal_loading_spanner" class="spanner">
    <div class="loader"></div>
    <b class="">LOADING GEODATA - PLEASE WAIT</b>
    <br>
    <b class="" id="modal_info_text"></b>
</div>


<div class="container">
    <nav class="navbar navbar-light navbar-dark static-top">
        <div class="container">
        <span>
            <img src="/img/logo.png" height="60px"/>
            <a class="navbar-brand" href="/"><b class="fhcolor_text">Data Science II - Public Transport - Spreading Viewer</b></a>
        </span>
        </div>
    </nav>


    <!-- ---- MAIN CONTENT ----------->
    <div id="content d-flex">


        <!-- ADD SPACING -->
        <div class="row mt-5"></div>

        <div class="row justify-content-center align-self-center">
            <div class="col-4">
                <label for="from_station" class="form-label"><b class="fhcolor_text">START STATION</b></label>
                <select id="from_station" class="form-select form-select-lg mb-3 fhcolor_text_dark"
                        data-live-search="true"
                        onchange="visualize_station_data(0)">

                </select>


            </div>
            <div class="col-2">
                <img src="/img/train.png" height="100px">
            </div>
            <div class="col-5">

                <label for="to_station" class="form-label"><b class="fhcolor_text">DESTINATION STATION</b></label>
                <select id="to_station" class="form-select form-select-lg mb-3 fhcolor_text_dark"
                        data-live-search="true"
                        onchange="visualize_station_data(1)">

                </select>


            </div>
        </div>


        <div class="row">
            <div class="col">
                <div id="info" class="fhcolor_text" >Hover over a country</div>
            </div>
        </div>

        <div class="row" id="map_content" height="600px">
            <div class="col">


                <svg id="svg_map" height="600px">
                    <g id="svg_map_map" class="map"></g>
                    <g class="bounding-box">
                        <rect></rect>
                    </g>
                    <g class="centroid">
                        <circle r="4"></circle>
                    </g>

                </svg>
            </div>

        </div>


    </div>


    <!-- Footer -->
    <footer class="bg-light text-center text-white">
        <div class="container p-4">
            <section class="mb-4">

                <a class="btn btn-outline-light btn-floating m-1" href="/visualisation_files/departure_table.csv"
                   download="departure_table.csv" role="button">
                    <img src="/img/csv.png" height="50px"/>
                </a>

                <a class="btn btn-outline-light btn-floating m-1"
                   href="https://github.com/RBEGamer/DataScienceIISeminar" role="button">
                    <img src="/img/git.png" height="50px"/>
                </a>

                <a class="btn btn-outline-light btn-floating m-1" href="http://marcelochsendorf.com/impressum"
                   role="button">
                    <img src="/img/impressum.png" height="50px"/>
                </a>
            </section>

        </div>
    </footer>
</div>


<script src="/js/jquery-3.4.1.min.js"></script>

<script src="/js/popper.min.js"></script>
<script src="/bootstrap-5.1.3-dist/js/bootstrap.bundle.min.js"></script>
<!--<script src="/bootstrap-select-1.13.14/dist/js/bootstrap-select.min.js"></script>-->


<script src="/js/2.0.4_socket.io.js"></script>
<script src="/js/d3.min.js"></script>

<script src="/js/d3-array/dist/d3-array.min.js"></script>
<script src="/js/d3-geo/dist/d3-geo.min.js"></script>

<script src="/js/papaparse/papaparse.min.js"></script>

<script>


    var width = 300;
    var height = 600;
    var scale = 10; //CONTAINS THE MAP SCALE FACTOR

    var projection = null;
    var geoGenerator = null;
    var path = null;


    var loaded_lk_geojson = null;
    var loaded_station_geojson = null;

    function init_d3() {
        width = $("#map_content").width();
        height = $("#map_content").height();

        $("#svg_map").width(width);
        $("#svg_map").height(height);


        projection = d3.geoMercator();


        geoGenerator = d3.geoPath().projection(projection);
    }


    function handleMouseover(e, d) {
        let pixelArea = geoGenerator.area(d);
        let bounds = geoGenerator.bounds(d);
        let centroid = geoGenerator.centroid(d);
        let measure = geoGenerator.measure(d);
        if(!d.properties.name ){
            return;
            $("#info").html('---');

        }

        $("#info").html("<b>" + String(d.properties.name) + "</b>");

        d3.select('#content .bounding-box rect')
            .attr('x', bounds[0][0])
            .attr('y', bounds[0][1])
            .attr('width', bounds[1][0] - bounds[0][0])
            .attr('height', bounds[1][1] - bounds[0][1]);

        d3.select('#svg_map .centroid')
            .style('display', 'inline')
            .attr('transform', 'translate(' + centroid + ')');
    }

    var station_id_to = null;
    var station_id_from = null;


    function visualize_station_data(_station_type) {
        //_station_type = 0 FROM
        // 1 = TO
        if (_station_type === 0) {
            station_id_from = $("#from_station").val();
        } else if (_station_type === 1) {
            station_id_to = $("#to_station").val();
        }

        if (station_id_from === station_id_to) {
            alert("Start and destination station cant be the same");
            if (_station_type === 0) {
                $("#from_station").val('');
                $("#from_station").attr('selected', '');
            } else if (_station_type === 1) {
                $("#to_station").val('');
                $("#to_station").attr('selected', '');
            }
            return;
        }


        if (!station_id_from || !station_id_to) {
            return;
        }


        $("#modal_info_text").html("LOADING");
        show_loading_modal(true); //DISPLAY OVERLAY

        //TODO LOAD DATA


        show_loading_modal(false); //DISPLAY OVERLAY
        console.log(station_id_from);
    }

    function updatestation(geojson) {
        let u = d3.select('#svg_map g.map')
            .selectAll('path')
            .data(geojson.features).enter().append("circle")
            .attr('r', 5)
            .attr('cx', function (d) {
                return projection(d.geometry.coordinates)[0]
            })
            .attr('cy', function (d) {
                return projection(d.geometry.coordinates)[1]
            })
            .on("mouseover", function (d) {
                console.log("just had a mouseover", d3.select(d));
                d3.select(this).classed("active", true);

            }).on("mouseout", function (d) {
                d3.select(this).classed("active", false);
            });
    }


    function update(geojson) {

        var center = d3.geoCentroid(geojson);
        var offset = [width / 2, height / 2];
        console.log(center);


        var _projection = d3.geoMercator().scale(scale).center(center).translate(offset);
        path = d3.geoPath().projection(_projection);

        var bounds = path.bounds(geojson);
        var hscale = scale * width / (bounds[1][0] - bounds[0][0]);
        var vscale = scale * height / (bounds[1][1] - bounds[0][1]);
        scale = (hscale < vscale) ? hscale : vscale;
        var offset = [width - (bounds[0][0] + bounds[1][0]) / 2,
            height - (bounds[0][1] + bounds[1][1]) / 2];
        debugger;
        projection = d3.geoMercator().center(center).scale(scale).translate(offset);
        path = path.projection(projection);

        console.log(scale);
        console.log(center);
        console.log(offset);


        let u = d3.select('#svg_map g.map')
            .selectAll('path')
            .data(geojson.features).enter().append("path")
            .attr("d", path)
            .on('mouseover', handleMouseover);


    }

    function show_loading_modal(_state) {
        if (_state) {
            $("#modal_loading_spanner").addClass("show");
            $("#modal_loading_overlay").addClass("show");
        } else {
            $("#modal_loading_spanner").removeClass("show");
            $("#modal_loading_overlay").removeClass("show");
        }
    }


    //POPULATES THE STATION SELECTION FIELDS
    function parse_station_data(json) {
        if (!json || !json.features) {
            alert("failed to load selected_stations");
            return;
        }
        //LOAD VALUES INTO SELECT ITEM
        for (var i = 0; i < json.features.length; i++) {
            $("#from_station").append(new Option(json.features[i].properties.station_name, json.features[i].properties.station_id));
            $("#to_station").append(new Option(json.features[i].properties.station_name, json.features[i].properties.station_id));
        }
        $("#from_station").val('- PLEASE SELECT -');
        $("#to_station").val('- PLEASE SELECT -');
    }




    $(document).ready(function () {
        console.log("ready!");

        socket = io();
        socket.emit('msg', {});

        socket.on('update', function (data) {
            var objectConstructor = {}.constructor;
            console.log(data)
        });


        //INIT D3
        init_d3();

        $("#modal_info_text").html("LOADING RECORDED DATES");
        show_loading_modal(true); //DISPLAY OVERLAY
        $.getJSON("/visualisation_files/generated/4_departure_table_day_list.json", function (recorded_dates) {



            $("#modal_info_text").html("LOADING STATIONS");
            $.getJSON("/visualisation_files/generated/0_db_station_list.json", function (station_json) {
                parse_station_data(station_json);// LOAD SELECTED STATION INTO FIELDS


                $("#modal_info_text").html("LOADING GEOJSON MAP");
                d3.json('/visualisation_files/generated/gemeinden_simplify200.geojson').then(function (map_json) {
                    loaded_lk_geojson = map_json;
                    update(map_json);


                    $("#modal_info_text").html("LOADING STATIONS POI LOCATIONS");
                    //LOAD STATION POINTS
                    d3.json('/visualisation_files/generated/0_db_station_list.json').then(function (stationpoi_json) {
                        loaded_station_geojson = stationpoi_json;
                        updatestation(stationpoi_json);
                        //DISABLE LOADING MODAL
                        $("#modal_info_text").html("");
                        show_loading_modal(false);
                    });
                });
            });
        });
    });
</script>

</body>

</html>