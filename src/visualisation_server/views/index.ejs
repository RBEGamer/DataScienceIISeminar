<html lang="en">

<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="kaps avatar test side">
    <meta name="author" content="Marcel Ochsendorf">
    <meta http-equiv="cache-control" content="max-age=0"/>
    <meta http-equiv="cache-control" content="no-cache"/>
    <meta http-equiv="expires" content="0"/>
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT"/>
    <meta http-equiv="pragma" content="no-cache"/>


    <link rel="apple-touch-icon" sizes="144x144" href="/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png">
    <link rel="manifest" href="/favicon/site.webmanifest">
    <link rel="mask-icon" href="/favicon/safari-pinned-tab.svg" color="#5bbad5">
    <link rel="shortcut icon" href="/favicon/favicon.ico">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="msapplication-config" content="/favicon/browserconfig.xml">
    <meta name="theme-color" content="#ffffff">


    <title><%= app_name %></title>


    <link href="/bootstrap-5.1.3-dist/css/bootstrap.min.css" rel="stylesheet" media="all">
    <link href="/bootstrap_datepicker/css/bootstrap-datepicker.min.css" rel="stylesheet" media="all">
    <link href="/css/fh_design.css" rel="stylesheet" media="all">
    <link href="/css/landing-page.css" rel="stylesheet">
    <link href="/css/main.css" rel="stylesheet">
    <link href="/css/fullscreen_modal.css" rel="stylesheet">
    <link href="/css/fullscreen_modal_map.css" rel="stylesheet">


    <style>
        #content .info {
            height: 20px;

        }


        #content .map path {
            fill: #aaa;
            stroke: #fff;
        }

        #content .bounding-box rect {
            fill: none;
            stroke: #333;
            stroke-dasharray: 2, 1;
        }

        #content .centroid {
            display: none;
        }

        #content .centroid circle {
            fill: red;
        }

        circle {
            fill: #fff;
            fill-opacity: 0.4;
            stroke: #111;
        }

        path.active {
            fill: pink;
        }

        circle.active {
            fill: blue;
        }
    </style>
</head>

<body>


<!------------------ LOADING OVERLAY -------------->

<div id="modal_loading_overlay" class="overlay"></div>
<div id="modal_loading_spanner" class="spanner">
    <div class="loader"></div>
    <b class="">LOADING GEODATA - PLEASE WAIT</b>
    <br>
    <b class="" id="modal_info_text"></b>
</div>


<div class="container">
    <nav class="navbar navbar-light navbar-dark static-top">
        <div class="container">
        <span>
            <img src="/img/logo.png" height="60px"/>
            <a class="navbar-brand" href="/"><b class="fhcolor_text">Data Science II - Public Transport - Spreading Viewer</b></a>

            <button type="button" class="btn btn-outline-fh btn-sm" onclick="load_example(1)">EXAMPLE 1</button>
            <button type="button" class="btn btn-outline-fh btn-sm" onclick="load_example(2)">EXAMPLE 2</button>
            <button type="button" class="btn btn-outline-fh btn-sm" onclick="load_example(3)">EXAMPLE 3</button>

        </span>
        </div>
    </nav>


    <!-- ---- MAIN CONTENT ----------->
    <div id="content d-flex">


        <!-- ADD SPACING -->
        <div class="row mt-5"></div>

        <div class="row justify-content-center align-self-center">


            <div class="col-3">
                <label for="from_station" class="form-label"><b class="fhcolor_text">START STATION</b></label>
                <select id="from_station" class="form-select form-select-lg mb-3 fhcolor_text_dark"
                        data-live-search="true"
                        onchange="visualize_station_data(0)">

                </select>
            </div>
            <div class="col-2">
                <img src="/img/train.png" height="75px">
            </div>

            <div class="col-3">
                <label for="to_station" class="form-label"><b class="fhcolor_text">TRAIN ID</b></label>
                <select id="to_station" class="form-select form-select-lg mb-3 fhcolor_text_dark"
                        data-live-search="true"
                        onchange="visualize_station_data(1)">
                </select>
            </div>

            <div class="col-1">
                <img src="/img/date.png" height="75px">
            </div>

            <div class="col-3">
                <label for="selected_date" class="form-label"><b class="fhcolor_text">DATE</b></label>
                <select id="selected_date" class="form-select form-select-lg mb-3 fhcolor_text_dark"
                        data-live-search="true"
                        onchange="visualize_station_data(2)">
                </select>
            </div>
        </div>


        <div class="row">
            <div class="col">
                <div id="info" class="fhcolor_text"></div>

            </div>
        </div>


        <div class="row" id="map_content" height="600px">
            <div class="col-4">

                <br><br><br><br><br><br><br>
                <br><br><br><br><br><br><br>
                <br><br><br><br><br><br><br>


                <table class="table">
                    <thead class="thead-dark fhcolor_bg" style="color: whitesmoke;">
                    <tr>
                        <th scope="col">property</th>
                        <th scope="col"></th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <th scope="row">Capacity</th>
                        <td id="ift_cap"></td>
                    </tr>
                    <tr>
                        <th scope="row">Stops</th>
                        <td id="ift_stops"></td>
                    </tr>
                    <tr>
                        <th scope="row">Stops on route</th>
                        <td><select id="ift_osor" class="form-select form-select-lg mb-3 fhcolor_text_dark"></select>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Crossed districs</th>
                        <td id="ift_cd"></td>
                    </tr>
                    </tbody>
                </table>

                <br>
                <h4>TRAIN IMPACT HEATMAP</h4>
                <br>
                <table style="width: 100%; height: 450px" class="">
                    <tr>

                    </tr>
                    <tr>
                        <label for="ui_spreadingfactor" class="form-label">Spreading factor <b
                                    id="ui_spreadingfactor_val"></b></label>
                        <input type="range" class="form-range" min="0.1" max="0.9" step="0.1" id="ui_spreadingfactor"
                               value="0.1" onchange="visualize_station_data(4)">
                    </tr>
                    <tr>
                        <label for="ui_spreadingfactor" class="form-label">Average passenger stay <b
                                    id="ui_avgps_val"></b></label>
                        <input type="range" class="form-range" min="1" max="6" step="0.1" id="ui_avgps"
                               value="1" onchange="visualize_station_data(4)">
                    </tr>
                </table>


            </div>


            <div class="col-8">
                <svg id="svg_map" height="600px">
                    <g id="svg_map_map" class="map"></g>
                    <g class="bounding-box">
                        <rect></rect>
                    </g>
                </svg>
            </div>


        </div>


        <div class="row">
            <div class="col-12">

                <div id="impact_heatmap_holder" style="height: 800px;">
                    <div id="impact_heatmap"></div>
                </div>
            </div>
        </div>

    </div>
    <footer class="bg-light text-center text-white">
        <div class="container p-4">
            <section class="mb-4">

                <a class="btn btn-outline-light btn-floating m-1" href="/visualisation_files" role="button">
                    <img src="/img/csv.png" height="50px"/>
                </a>

                <a class="btn btn-outline-light btn-floating m-1"
                   href="https://github.com/RBEGamer/DataScienceIISeminar" role="button">
                    <img src="/img/git.png" height="50px"/>
                </a>

                <a class="btn btn-outline-light btn-floating m-1" href="http://marcelochsendorf.com/impressum"
                   role="button">
                    <img src="/img/impressum.png" height="50px"/>
                </a>
            </section>
        </div>
    </footer>

</div>


<script src="/js/jquery-3.4.1.min.js"></script>
<script src="/js/popper.min.js"></script>
<script src="/bootstrap-5.1.3-dist/js/bootstrap.bundle.min.js"></script>
<script src="/js/2.0.4_socket.io.js"></script>
<script src="/js/d3.min.js"></script>
<script src="/js/d3-array/dist/d3-array.min.js"></script>
<script src="/js/d3-geo/dist/d3-geo.min.js"></script>
<script src="/js/papaparse/papaparse.min.js"></script>
<script src="/bootstrap_datepicker/js/bootstrap-datepicker.min.js"></script>


<script>
    var width = 300;
    var height = 600;
    var scale = 10; //CONTAINS THE MAP SCALE FACTOR
    var projection = null;
    var geoGenerator = null;
    var path = null;
    var loaded_lk_geojson = null;
    var loaded_station_geojson = null;
    var loaded_station_lookuptable = null;
    var loaded_start_station_train_options_lookuptable = null;
    var loaded_covid_data_for_selected_date = null;
    var loaded_covid_data_dates_list = null;
    //MAP SVG ELEMENTS
    var map_svg = null;
    var map_landkreise_svg = null;
    var map_line_svg = null;
    //USER SELECTED STATION
    var station_id_to = null;
    var station_id_from = null;
    var selected_train_id = null;
    var selected_date = null;
    //HEATMAP SVG ELEMETNS
    var heatmap_svg = null;

    //INIT THE D3 CONTEXT AND CREATE SVG ELEMENTS FOR HEATMAP AND MAP
    function init_d3() {
        width = $("#map_content").width();
        height = $("#map_content").height();

        $("#svg_map").width(width);
        $("#svg_map").height(height);

        projection = d3.geoMercator();
        geoGenerator = d3.geoPath().projection(projection);
        //CREATE SVG AND SOME LAYERS TO DRAW DIFFERENT OBJECTS ON
        map_svg = d3.select("#svg_map").append("svg").attr("width", width).attr("height", height); //MAP
        map_landkreise_svg = map_svg.append("g"); //STATION DOTS
        map_line_svg = map_svg.append("g"); //LINES


        //INIT HEATMAP
        init_impact_heatmap();
    }

    //MOUSEOVER POINTS ON MAP TO SHOW THE NAME OF THE STATION
    function handleMouseover(e, d) {
        let pixelArea = geoGenerator.area(d);
        let bounds = geoGenerator.bounds(d);
        let centroid = geoGenerator.centroid(d);
        let measure = geoGenerator.measure(d);
        if (!d.properties.name) {
            $("#info").html('---')
            return;
        }

        $("#info").html("<b>" + String(d.properties.name) + "</b>");

        d3.select('#content .bounding-box rect')
            .attr('x', bounds[0][0])
            .attr('y', bounds[0][1])
            .attr('width', bounds[1][0] - bounds[0][0])
            .attr('height', bounds[1][1] - bounds[0][1]);

        d3.select('#svg_map .centroid')
            .style('display', 'inline')
            .attr('transform', 'translate(' + centroid + ')');
    }

    //THIS FUNCTIONS DISPLAYS THE GRAPHS AND MAPS IF ALL USER DATA ARE PRESENT
    //THIS FUNCTION WILL BE CALLED WITH A CHANGE EVENT FROM THE USER INPUT FORMS to_station, from_station ,selected_date
    function visualize_station_data(_station_type) {
        //_station_type = 0 FROM
        // 1 = TO
        if (_station_type === 0) {
            station_id_from = $("#from_station").val();
            get_trains_from_start_station_into_dest_field(station_id_from);
        }
        selected_train_id = $("#to_station").val();
        selected_date = $("#selected_date").val();


        if (!station_id_from || !selected_train_id || !selected_date) {
            // clear_selection();
            return;
        }

        $("#modal_info_text").html("LOADING");
        show_loading_modal(true); //DISPLAY OVERLAY
        //DISPLAY STATIONS AS DOTS ON MAP
        update_map();
        show_selected_stions_on_map(station_id_from, selected_train_id);
        display_train_info_from_train(station_id_from, selected_train_id);
        //TODO REMOVE BAD JSON CALL
        display_impact_heatmap({
            station_id_from: station_id_from,
            selected_train_id: selected_train_id,
            date: selected_date
        });
        //HIDE LOADING MODAL
        setTimeout(function () {
            show_loading_modal(false);
        }, 200);
        console.log(station_id_from);
    }


    //https://stackoverflow.com/questions/17242144/javascript-convert-hsb-hsv-color-to-rgb-accurately
    function hsv2rgb(h, s, v) {
        let f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
        return [f(5) * 255, f(3) * 255, f(1) * 255];
    }

    function rgbToHex(r, g, b) {
        return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }

    //DISPLAYS ALL STATIONS OF A GIVEN TRAIN ID INTO THE MAP WITH DIFFERENT COLORED DOTS
    function show_selected_stions_on_map(from_id, train) {

        if (!loaded_station_lookuptable) {
            alert("please reload site");
            return;
        }

        const from = loaded_station_lookuptable[String(from_id)];
        //  const to = loaded_station_lookuptable[String(to_id)];
        const to = get_end_stations_from_train(from_id, train);

        if (!from || !to) {
            alert("station invalid");
            return;
        }
        //ADD START POINT = START STATION AS DOT IN RED
        var points = [{
            lat: from.longitude,
            long: from.latitude,
            station_name: from.station_name,
            color: hsv2rgb(120, 1, 1),
            r: 10
        }]
        //ADD ALL OTHER STATIONS
        for (var i = 0; i < to.length; i++) {
            const col = hsv2rgb(120 + (300 / to.length) * i, 1, 1);
            const colhx = rgbToHex(col[0], col[1], col[2]);
            points.push({lat: to[i].lat, long: to[i].long, station_name: to[i].station_name, color: colhx, r: 4});


        }

        map_landkreise_svg.selectAll("circle").remove()
            .data(points)
            .enter()
            .append("circle")
            .attr("cx", function (d) {
                return projection([d.lat, d.long])[0];
            })
            .attr("cy", function (d) {
                return projection([d.lat, d.long])[1];
            })
            .attr("place", function (d) {
                return d.station_name;
            })
            .attr("r", function (d) {
                return d.r;
            })
            .style("fill", function (d) {
                return d.color;
            });
        //.on("mouseover", mouseover);
    }

    //THIS FUNCTION INSERTS THE STATION FEATURES
    function updatestation(geojson) {
        let u = d3.select('#svg_map g.map')
            .selectAll('path')
            .data(geojson.features).enter().append("circle")
            .attr('r', 5)
            .style("fill", "red")
            .attr('cx', function (d) {
                return projection(d.geometry.coordinates)[0]
            })
            .attr('cy', function (d) {
                return projection(d.geometry.coordinates)[1]
            })

            .on("mouseover", function (d) {
                console.log("just had a mouseover", d3.select(d));
                d3.select(this).classed("active", true);

            }).on("mouseout", function (d) {
                d3.select(this).classed("active", false);
            });
    }

    //THIS FUNCTIONS COLORS THE MAPS DISTRICTS ACCORDING THE GIVEN COVID CASES
    //FROM A GIVEN DATE
    function color_map_regions(_data_obj, _date) {

        var cvd_data = null;
        if (_date) {


            cvd_data = loaded_covid_data_dates_list[String(_date)];
        }
        if (_data_obj && _data_obj.properties && _data_obj.properties.AGS && cvd_data) {
            //OFFICIAL AGS ARE 8 CHARS, COVID DATA ONES ONLY 5
            //const key_int = parseInt(_data_obj.properties.AGS);
            var ags_key_converted = null;
            if (!String(_data_obj.properties.AGS).startsWith('0')) {
                ags_key_converted = String(_data_obj.properties.AGS).slice(0, 5);
            } else {
                ags_key_converted = String(_data_obj.properties.AGS).slice(1, 6);
            }

            if (!ags_key_converted) {
                return rgbToHex(0, 0, 0);
            }


            const inc = cvd_data['incidence'];
            const rinc = inc[ags_key_converted];
            //debugger;
            if (rinc) {
                //PERFORM SOME COLORING OF THE TILES
                return color_map_on_incidence(rinc);

            } else {
                //console.log(_data_obj.properties.AGS);
                return rgbToHex(0, 0, 0);
            }


            //ELSE USE RANDOM BLACK/WHITE COLORING
        } else {
            return rgbToHex(0, 120, 116);
        }
    }

    //RED TO GREEN COLOR MAPPING ON COVID INCIDENCE 0-1000 INCIDENCE => GREE-RED
    function color_map_on_incidence(_inc, _base_offset = 100) {
        _inc = Math.min(_inc,1000);
        _inc = Math.max(_inc,0);


        _inc = (1000 - _inc) * (1/1000.0)
        console.log(_inc);
        if(!_base_offset){
            _base_offset = 100;
        }
        const col = hsv2rgb(_base_offset*_inc, 1, 1);
        return rgbToHex(col[0], col[1], col[2]);
    }

    //DRAW THE BASE LAYER MAP (LANDKREISE) AND CENTER THE PROJECTION TO FIT PERFECTLY INSIDE OF THE CANVAS
    function update_map(geojson) {
        if (!geojson) {
            geojson = loaded_lk_geojson;
        }
        if (!geojson) {
            alert("please reload");
            return;
        }
        var center = d3.geoCentroid(geojson);
        var offset = [width / 2, height / 2];
        console.log(center);


        var _projection = d3.geoMercator().scale(scale).center(center).translate(offset);
        path = d3.geoPath().projection(_projection);
        //CALC SIZE OF CANVAS BOUNDS
        var bounds = path.bounds(geojson);
        var hscale = scale * width / (bounds[1][0] - bounds[0][0]);
        var vscale = scale * height / (bounds[1][1] - bounds[0][1]);
        scale = (hscale < vscale) ? hscale : vscale;
        var offset = [width - (bounds[0][0] + bounds[1][0]) / 2,
            height - (bounds[0][1] + bounds[1][1]) / 2];
        //debugger;
        projection = d3.geoMercator().center(center).scale(scale).translate(offset);
        path = path.projection(projection);

        console.log(scale);
        console.log(center);
        console.log(offset);
        //FINALLY DRAW MAP
        let u = d3.select('#svg_map g.map')
            .selectAll('path')
            .data(geojson.features)
            .join("path")
            .attr("fill", d => color_map_regions(d, selected_date))
            .attr("d", path);
    }

    //ENABLES DISABLE THE LOADING MODAL OVERLAY TO INDICATE THAT THE PAGE IS DOINF SOMETHING
    function show_loading_modal(_state) {
        if (_state) {
            $("#modal_loading_spanner").addClass("show");
            $("#modal_loading_overlay").addClass("show");
        } else {
            $("#modal_loading_spanner").removeClass("show");
            $("#modal_loading_overlay").removeClass("show");
        }
    }

    function clear_selection(_full) {
        //REMOVE DOTS FROM MAP
        map_landkreise_svg.selectAll("circle").remove();
        //$("#to_station").remove();
        $("#ui_spreadingfactor").val(0.1);
        $("#ui_spreadingfactor_val").html($("#ui_spreadingfactor").val());

        $("#ui_avgps").val(1);
        $("#ui_avgps_val").html($("#ui_avgps").val());
        $("#to_station").empty();
    }


    function init_impact_heatmap() {
        display_impact_heatmap();
    }

    function get_covid_incides_by_district_date(_date, _ags) {
        var cvd_data = null;
        if (_date) {
            cvd_data = loaded_covid_data_dates_list[String(_date)]["incidence"];
        } else {
            return Math.random() * 1000;
        }

        if(!_ags){
            return Math.random() * 1000;
        }

        var ags_key_converted = null;

        if (!String(_ags).startsWith('0')) {
            ags_key_converted = String(_ags).slice(0, 5);
        } else {
            ags_key_converted = String(_ags).slice(1, 6);
        }


        var start_station_cov = Math.random() * 1000;
        if (!ags_key_converted) {

        } else {
            start_station_cov = cvd_data[ags_key_converted];
        }


        return start_station_cov;

    }

    function display_impact_heatmap(_data) {
        $("#ui_spreadingfactor_val").html($("#ui_spreadingfactor").val());
        $("#ui_avgps_val").html($("#ui_avgps").val());


        //REMOVE OLD ELEMENT
        $("#impact_heatmap").html("");

        const margin = {top: 30, right: 130, bottom: 30, left: 130},
            width = $("#impact_heatmap_holder").width() - margin.left - margin.right,
            height = $("#impact_heatmap_holder").height() - margin.top - margin.bottom;

        // append the svg object to the body of the page
        heatmap_svg = d3.select("#impact_heatmap")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        //PREPARE DATA TO LOAD INTO THE HEATMAP
        var horizontal = [];
        var vertical = [];
        var val_data = [];
        var ags = [];
        var stay_color_offset = 100; //BASE COLOR PALETTE
        //SAMPLE DATA FOR NO DATA :) SO JUST A 1x1 SQUARE
        if (!_data) {
            horizontal = ['X'];
            vertical = ['Y'];
        } else {
            const train_capacity = get_train_capacity(_data.station_id_from, _data.selected_train_id);
            const rt = get_end_stations_from_train(_data.station_id_from, _data.selected_train_id);
            for (var i = 0; i < rt.length; i++) {
                horizontal.push(rt[i].station_name);
            }

            const cd = get_crossed_districts(_data.station_id_from, _data.selected_train_id);
            for (var i = 0; i < cd.length; i++) {
                var n = cd[i].lkname;
                if (!n || n === "nan" || n === "NaN") {
                    n = cd[i].station_name;
                }

                if (!n || n === "nan" || n === "NaN") {
                    ags.push(cd[i].ags);
                } else {
                    ags.push(null);
                }

                //REPLACE DISTRICT POSTFIX FOR BETTER READABILITY
                if (n.includes('(')) {
                    n = n.substr(0, n.indexOf('('));
                }
                vertical.push(n);
            }
            //  debugger;


            //CALCULATE VALUES FOR HEATMAP
            //var start_covid_data = get_covid_data_for_station(_data.station_id_from);



            //RUN THE SIMULATION DEPENDING THE USER VALUES
            var counter = 0;
            const spreading =  parseFloat($("#ui_spreadingfactor").val());
            const stay = parseFloat($("#ui_avgps").val());
            stay_color_offset = 100-(stay*10);
            var cov_val = 0;
            var cov_mult = 0.0;
           // debugger;
            for (var v = 0; v < vertical.length; v++) {
                cov_val = get_covid_incides_by_district_date(_data.date, ags[v]);

                for (var h = 0; h < horizontal.length; h++) {
                    //RESET STAY COUNTER
                    if(counter > stay){
                        counter = 0;
                        //cov_mult = -= ;
                    }else {
                        counter++;
                    }


                    if(Math.random() > spreading){
                        cov_val *= (1+spreading * 1);
                    }




                    val_data.push({group: horizontal[h], variable: vertical[v], value: cov_val});
                }
            }


        }


        // Build X scales and axis:
        const x = d3.scaleBand()
            .range([0, width])
            .domain(horizontal)
            .padding(0.01);
        heatmap_svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x))

        // Build X scales and axis:
        const y = d3.scaleBand()
            .range([height, 0])
            .domain(vertical)
            .padding(0.01);
        heatmap_svg.append("g")
            .call(d3.axisLeft(y));


        if (_data) {
            heatmap_svg.selectAll()
                .data(val_data, function (d) {
                    return d.group + ':' + d.variable;
                })
                .join("rect")
                .attr("x", function (d) {
                    return x(d.group)
                })
                .attr("y", function (d) {
                    return y(d.variable)
                })
                .attr("width", x.bandwidth())
                .attr("height", y.bandwidth())
                .style("fill", function (d) {
                    return color_map_on_incidence(d.value, stay_color_offset)
                });

        } else {
            heatmap_svg.selectAll()
                .data([], function (d) {
                    return "X:Y";
                })
                .join("rect")
                .attr("x", function (d) {
                    return 1;
                })
                .attr("y", function (d) {
                    return 1;
                })
                .attr("width", x.bandwidth())
                .attr("height", y.bandwidth())
                .style("fill", function (d) {
                    return rgbToHex(0, 120, 140);
                })
        }

    }

    function get_covid_data_for_station(_station) {


        //SOME RANDOM DATA FOR INIT
        return Math.random() * 328;
    }



    //FILLS INFO TABLE WITH TRAIN AND STATION INFORMATION
    function display_train_info_from_train(_start_station, _train_id) {
        const entry = loaded_start_station_train_options_lookuptable[String(_start_station)];
        if (!entry) {
            return [];
        }
        const train = entry.trains[String(_train_id)];
        var fn = null;
        for (var i = 0; i < entry.trains.length; i++) {
            if (String(entry.trains[i]) === String(_train_id)) {
                fn = i;
            }
        }

        if (fn !== null) {
            const cap = entry.capacity[fn];
            if (cap) {
                $("#ift_cap").html(cap);
            } else {
                $("#ift_cap").html("-");
            }
        }

    }

    function get_train_capacity(_start_station, _train_id) {
        const entry = loaded_start_station_train_options_lookuptable[String(_start_station)];
        if (!entry) {
            return [];
        }
        const train = entry.trains[String(_train_id)];
        var fn = null;
        for (var i = 0; i < entry.trains.length; i++) {
            if (String(entry.trains[i]) === String(_train_id)) {
                fn = i;
            }
        }

        if (fn !== null) {
            const cap = entry.capacity[fn];


            if(cap){
                return cap;
            }else{
                return 0;
            }
        }

    }

    //RETURNS ALL NEXT STATIONS FROM A GIVENT START TRAIN AND START STATION
    //USED FOR COLORED DOTS ON MAP
    function get_end_stations_from_train(_start_station, _train_id) {
        const entry = loaded_start_station_train_options_lookuptable[String(_start_station)];
        if (!entry) {
            return [];
        }


        const train = entry.trains[String(_train_id)];
        var fn = null;
        for (var i = 0; i < entry.trains.length; i++) {
            if (String(entry.trains[i]) === String(_train_id)) {
                fn = i;
            }
        }

        var ret = [];
        if (fn !== null) {

            const stops = entry.stops[fn];
            if (!stop) {
                return [];
            }
            const sp_stops = String(stops).split(',');
            var id = null;
            //SPLIT NEXST STATION OF THE SELECTED TRAINS
            //THIS IS A STRING <ID>%<TIME>,<ID>.... SEE JUPYTHER NOTEBOOK 01
            $("#ift_stops").html(sp_stops.length);
            $("#ift_osor").empty();
            $("#ift_cd").html("");
            var crosses_landkreise = [];
            for (var i = 0; sp_stops.length; i++) {
                if (!sp_stops[i]) {
                    break;
                }
                if (sp_stops[i].includes('%')) {
                    const sp_stop_dep = sp_stops[i].split('%');
                    if (sp_stop_dep.length > 0) {
                        id = sp_stop_dep[0];
                    }
                } else {
                    id = sp_stops[i];
                }
                const info = loaded_station_lookuptable[String(id)];

                if (info) {
                    //debugger;
                    ret.push({
                        lat: info.longitude,
                        long: info.latitude,
                        station_name: info.station_name,
                        color: "green"
                    });


                    //POPULATE INFO FILED FOR CROSSED LANDKREISE
                    $("#ift_osor").append(new Option(info.station_name, info.station_name));

                    if (info.lkname) {
                        crosses_landkreise.push(String(info.lkname));
                    }
                }
            }
            //POPULATE CROSSED LANDKREISE TABLE FIELD
            $("#ift_cd").html(crosses_landkreise.length);
        }
        return ret;
    }


    //GET ALL CROSSED DISTRICT NAMES FOR START STATION AND TRAIN ID
    //IF NO NAME WAS FOUND THE STATION ID WILL BE USED
    function get_crossed_districts(_start_station, _train_id) {
        const entry = loaded_start_station_train_options_lookuptable[String(_start_station)];
        if (!entry) {
            return [];
        }
        var fn = null;
        for (var i = 0; i < entry.trains.length; i++) {
            if (String(entry.trains[i]) === String(_train_id)) {
                fn = i;
            }
        }

        var crosses_landkreise = [];
        if (fn !== null) {

            const stops = entry.stops[fn];
            if (!stop) {
                return [];
            }
            const sp_stops = String(stops).split(',');
            var id = null;

            for (var i = 0; sp_stops.length; i++) {
                if (!sp_stops[i]) {
                    break;
                }
                if (sp_stops[i].includes('%')) {
                    const sp_stop_dep = sp_stops[i].split('%');
                    if (sp_stop_dep.length > 0) {
                        id = sp_stop_dep[0];
                    }
                } else {
                    id = sp_stops[i];
                }
                const info = loaded_station_lookuptable[String(id)];

                if (info) {
                    crosses_landkreise.push(info);
                }
            }

        }
        return crosses_landkreise;
    }


    //RETUNRS ALL TRAINS THAT IS DEPARTURING FROM A GIVEN STATION
    function get_trains_from_start_station_into_dest_field(_start_station) {
        //$("#to_station").remove();

        if (!loaded_start_station_train_options_lookuptable) {
            alert("please reload site");
            return;
        }

        const entry = loaded_start_station_train_options_lookuptable[String(_start_station)];
        if (!entry) {
            alert("please select an other train or reload site");
            clear_selection();
            return;
        }


        $('#to_station').empty();
        for (var i = 0; i < entry.trains.length; i++) {
            $("#to_station").append(new Option(entry.trains[i], entry.trains[i]));
        }

        $('#to_station').val('');

    }

    //LOAD EXAMPLE DATA => SIMPLY SET VALUES IN SELECTIONS FILEDS AND SEND CHANGE EVENT
    function load_example(_num) {

        map_landkreise_svg.selectAll("circle").remove();

        if (_num === 1) {
            $("#from_station").val('8011559').change();
            //A TIMEOUT IS NEEDED TO WAIT FOR THE TRAIN ID FORM TO BE FILLED
            $("#to_station").val('RE 1');
            setTimeout(function () {
                $("#selected_date").val('29112021').change();
            }, 100);

        } else if (_num === 2) {
            $("#from_station").val('8012940').change();
            //A TIMEOUT IS NEEDED TO WAIT FOR THE TRAIN ID FORM TO BE FILLED
            $("#to_station").val('RB 17');
            setTimeout(function () {
                $("#selected_date").val('29112021').change();
            }, 100);

        } else if (_num === 3) {
            $("#from_station").val('8012961').change();
            //A TIMEOUT IS NEEDED TO WAIT FOR THE TRAIN ID FORM TO BE FILLED
            $("#to_station").val('RB 52');
            setTimeout(function () {
                $("#selected_date").val('16012022').change();
            }, 100);

        }
    }

    //POPULATES THE STATION SELECTION FIELDS
    function parse_station_data(json) {
        if (!json || !json.features) {
            alert("failed to load selected_stations");
            return;
        }
        //LOAD VALUES INTO SELECT ITEM
        //$("#from_station").remove();
        for (var i = 0; i < json.features.length; i++) {
            //CHECK IF TRAIN IS DEPARTURING HERE => SO SHOW ONLY THIS STATIN
            if (loaded_start_station_train_options_lookuptable) {
                const t = loaded_start_station_train_options_lookuptable[String(json.features[i].properties.station_id)];
                if (t) {
                    $("#from_station").append(new Option(json.features[i].properties.station_name, json.features[i].properties.station_id));
                }
            }
        }
        $("#from_station").val('');
    }

    //FILL DATE SELECTION WITH THE PARSE DATES
    function parse_covid_loaded_dates_into_form(_dates) {
        $("#selected_date").empty();
        $("#selected_date").val('');

        if (_dates && _dates.recorded_dates) {
            for (var i = 0; i < _dates.recorded_dates.length; i++) {
                $("#selected_date").append(new Option(_dates.recorded_dates[i].readable, _dates.recorded_dates[i].sys));
            }
        } else {
            alert("date fetch failed. please reload");
        }
        $("#selected_date").val('');
    }


    $(document).ready(function () {
        console.log("ready!");

        socket = io();
        socket.emit('msg', {});

        socket.on('update', function (data) {
            var objectConstructor = {}.constructor;
            console.log(data)
        });


        //STYLE DATEPICKER
        $('#sandbox-container .input-group.date').datepicker({
            format: "ddmmyyyy",
            weekStart: 1,
            todayBtn: "linked",
            language: "de",
            daysOfWeekHighlighted: "1",
            autoclose: true
        });

        //INIT D3
        init_d3();
        //RESET INPUT ELEMENTS
        clear_selection(true);


        $("#modal_info_text").html("LOADING RECORDED DATES");
        show_loading_modal(true); //DISPLAY OVERLAY
        $.getJSON("/visualisation_files/generated/4_downloaded_covid_data_dates.json", function (_recorded_dates) {
            loaded_covid_data_dates_list = _recorded_dates;
            parse_covid_loaded_dates_into_form(loaded_covid_data_dates_list);

            $("#modal_info_text").html("LOADING STATION LOOKUP_TABLE");
            $.getJSON("/visualisation_files/generated/0_db_station_lookuptable.json", function (_station_lookuptable) {
                loaded_station_lookuptable = _station_lookuptable;

                $("#modal_info_text").html("LOADING TRAIN LOOKUP_TABLE");
                $.getJSON("/visualisation_files/generated/4_station_train_departure_lookuptable.json", function (_loaded_start_station_train_options_lookuptable) {
                    loaded_start_station_train_options_lookuptable = _loaded_start_station_train_options_lookuptable;


                    $("#modal_info_text").html("LOADING STATIONS");
                    $.getJSON("/visualisation_files/generated/0_db_station_list.json", function (station_json) {
                        parse_station_data(station_json);// LOAD SELECTED STATION INTO FIELDS


                        $("#modal_info_text").html("LOADING GEOJSON MAP");
                        d3.json('/visualisation_files/generated/gemeinden_simplify200.geojson').then(function (map_json) {
                            loaded_lk_geojson = map_json;
                            update_map(map_json);

                            $("#modal_info_text").html("LOADING STATIONS POI LOCATIONS");
                            //LOAD STATION POINTS
                            d3.json('/visualisation_files/generated/0_db_station_list.json').then(function (stationpoi_json) {
                                loaded_station_geojson = stationpoi_json;
                                updatestation(stationpoi_json);

                                //show_selected_stions_on_map(8005935, 8004623);
                                //DISABLE LOADING MODAL
                                $("#modal_info_text").html("");
                                show_loading_modal(false);


                                //LOAD EXAMPLE


                                $(document).bind('keyup', function (e) {
                                    console.log(e.originalEvent.key);
                                    load_example(parseInt(String(e.originalEvent.key)));
                                });
                            });
                        });
                    });
                });
            });
        });
    });
</script>

</body>

</html>